
### 协程 批量执行

# import time
# import asyncio
#
# async def get_html(num):
#     result = await print_func(num)
#     return result
#
# async def print_func(num):
#     await asyncio.sleep(2)
#     print("http://www.larry.com/{}".format(num))
#     # return "http://www.larry.com/{}".format(num)
#
#
# if __name__ == '__main__':
#     start_time=time.time()
#     loop = asyncio.get_event_loop()
#     # tasks = [get_html(num) for num in range(1000)]
#     # loop.run_until_complete(asyncio.wait(tasks))
#
#     ##gather
#     group1 = [get_html(num) for num in range(1,5)]
#     group2 = [get_html(num) for num in range(5,10)]
#     group1 = asyncio.gather(*group1)
#     group2 = asyncio.gather(*group2)
#     ##可以取消一组
#     # group2.cancel()
#     loop.run_until_complete(asyncio.gather(group1,group2))
#
#     print("total time: {}".format(time.time() - start_time))
#
#     '''
#     http://www.larry.com/4
#     。。。。
#
#     '''




###获取协程的返回值(ensure_future | create_task)
###如果获取返回值时需要调回调函数使用（add_done_callback,回调函数的参数，需要放到future前面）
### partial可以把函数名+参数包装成一个函数名

# import time
# import asyncio
# from functools import partial
#
# async def get_html(num):
#     result = await p_func(num)
#     return result
#
# async def p_func(num):
#     await asyncio.sleep(2)
#     # print("http://www.larry.com/{}".format(num))
#     return "http://www.larry.com/{}".format(num)
#
#
# def callback(url,future):
#     print(url)
#     print("send email to larry")
#
#
# if __name__ == '__main__':
#     start_time=time.time()
#     loop = asyncio.get_event_loop()
#
#     # get_future = asyncio.ensure_future(get_html(2))
#     # loop.run_until_complete(get_future)
#     # print(get_future.result())
#
#     task = loop.create_task(get_html(2))
#     ##加入回调函数
#     task.add_done_callback(partial(callback,"http://email.larry.com"))
#     loop.run_until_complete(task)
#     print(task.result())
#
#     print("total time: {}".format(time.time() - start_time))



# ### ctrl + C 协程终止
# import time
# import asyncio
# from functools import partial
#
# async def get_html(num):
#     result = await p_func(num)
#     return result
#
# async def p_func(num):
#     await asyncio.sleep(2)
#     print("http://www.larry.com/{}".format(num))
#     return "http://www.larry.com/{}".format(num)
#
#
# def callback(url,future):
#     print(url)
#     print("send email to larry")
#
#
# if __name__ == '__main__':
#     # start_time=time.time()
#     loop = asyncio.get_event_loop()
#     task1 = get_html(2)
#     task2 = get_html(3)
#     task3 = get_html(30)
#     tasks = [task1,task2,task3]
#     ## 模拟键盘中断
#     try:
#         loop.run_until_complete(asyncio.wait(tasks))
#     except KeyboardInterrupt as e:
#         all_task = asyncio.Task.all_tasks()
#         for task in all_task:
#             print('task canceled')
#             print(task.cancel())
#         loop.stop()
#         loop.run_forever()
#     finally:
#         loop.close()






###协程嵌套协程

import asyncio

async def compute(x,y):
    await asyncio.sleep(1.5)
    return x+y


async def p_sum(x,y):
    result = await compute(x,y)
    print("{x} + {y} = {result}".format(result=result,x=x,y=y))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    task1 = p_sum(3,8)
    task2 = p_sum(4,8)
    tasks = [task1,task2]
    ##如果一个任务，下面不需要asyncio.wait
    # loop.run_until_complete(task1)
    loop.run_until_complete(asyncio.wait(tasks))
    loop.close()
    
    
    
    
==========================================
    
import asyncio
import time

async def get_html(url):
    await asyncio.sleep(1)
    return "Done {url}".format(url=url)


async def mm():
    tasks = []
    for i in range(800):
        url = "http://www.larry.com/{}".format(i)
        tasks.append(asyncio.ensure_future(get_html(url)))
    for task in asyncio.as_completed(tasks):
        result = await task
        print(result)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    start_time = time.time()
    loop.run_until_complete(mm())
    print(time.time() - start_time)
    
    
    
